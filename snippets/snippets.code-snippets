{
    "Material-UI Components": {
        "prefix": "!snackbar",
        "body":[
            "import Snackbar from '@material-ui/core/Snackbar';",
            "import MuiAlert from '@material-ui/lab/Alert';",
            "const Alert = React.forwardRef(function Alert(props, ref) {",
            "   return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;",
            "  });",
            "const [openSnackBar, setOpenSnackBar] = useState(false);",
            "const [snackBarType, setSnackBarType] = useState('success');",
            "const [alertMsg, setAlertMsg] = useState('');",
        ]
    },
    "get request": {
        "prefix": "get",
        "body": [
          "$LINE_COMMENT ======================",
          "$LINE_COMMENT ==== ${1:apiName} ====",
          "$LINE_COMMENT ======================",
          "router.get(\"${2:apiRoutes}\", requireLogin, async (req, res) => {",
          "    console.log(\"=== ${1.apiName} ===\\n Date: \", new Date(), \"\\n\");",
          "    console.log(\"User: \", req.user.id);",
          "    try {",
          "      const ${3:response} = await ${4:Model}.findOne({ _id: req.user.id });",
          "      console.log(${3:response});",
          "      return res.json(${3:response});",
          "    } catch (err) {",
          "      console.log(\"=== ${1.apiName} ERROR ===\\n\", err.message);",
          "      res.status(500).json({ error: \"SERVER_ERROR\" });",
          "    }",
          "  });",
          ""
        ],
        "description": "Write a post request"
    },
    "post request": {
        "prefix": "post",
        "body": [
          "$LINE_COMMENT ======================",
          "$LINE_COMMENT ==== ${1:apiName} ====",
          "$LINE_COMMENT ======================",
          "router.post(\"${2:apiRoutes}\", requireLogin, async (req, res) => {",
          "    console.log(\"=== ${1:apiName} ===\\n Date: \", new Date(), \"\\n\", req.body);",
          "    console.log(\"User: \", req.user.id);",
          "    const {} = req.body;",
          "    try {",
          "      const ${3:var} = new ${4:Model}({}); ",
          "      const ${5:response} = await ${3:var}.save();",
          "      console.log(${5:response});",
          "      return res.json(${5:response});",
          "    } catch (err) {",
          "      console.log(\"=== ${1:apiName} ERROR ===\\n\", err.message);",
          "      res.status(500).json({ error: \"SERVER_ERROR\" });",
          "    }",
          "  });",
          ""
        ],
        "description": "post request"
    },
    "put request": {
        "prefix": "put",
        "body": [
          "$LINE_COMMENT ======================",
          "$LINE_COMMENT ==== ${1:apiName} ====",
          "$LINE_COMMENT ======================",
          "router.put(\"${2:apiRoutes}\", requireLogin, async (req, res) => {",
          "    console.log(\"=== ${1:apiName} ===\\n Date: \", new Date(), \"\\n\", req.body);",
          "    console.log(\"User: \", req.user.id);",
          "    const {} = req.body;",
          "    const useFields = {};",
          "    if(${3:value}) useFields.${3:value} = ${3:value};",
          "    try {",
          "      const ${4:response} = await ${5:Model}.findByIdAndUpdate(id, {$set: useFields});",
          "      console.log(${4:response});",
          "      return res.json(${4:response});",
          "    } catch (err) {",
          "      console.log(\"=== ${1:apiName} ERROR ===\\n\", err.message);",
          "      res.status(500).json({ error: \"SERVER_ERROR\" });",
          "    }",
          "  });",
          ""
        ],
        "description": "put request"
    },
    "delete request": {
        "prefix": "delete",
        "body": [
          "$LINE_COMMENT ======================",
          "$LINE_COMMENT ==== ${1:apiName} ====",
          "$LINE_COMMENT ======================",
          "router.delete(\"${2:apiRoutes}/:id\", requireLogin, async (req, res) => {",
          "    console.log(\"=== ${1:apiName} ===\\n Date: \", new Date(), \"\\n\");",
          "    console.log(\"User: \", req.user.id);",
          "    const id = req.params;",
          "    try {",
          "      const ${3:response} = await ${4:Model}.findByIdAndUpdate(id, {$set: {status: \"DISABLED\"});",
          "      console.log(${3:response});",
          "      return res.json(${3:response});",
          "    } catch (err) {",
          "      console.log(\"=== ${1:apiName} ERROR ===\\n\", err.message);",
          "      res.status(500).json({ error: \"SERVER_ERROR\" });",
          "    }",
          "  });",
          ""
        ],
        "description": "delete request"
    },
    "AWS S3 config": {
      "prefix": "awsS3Config",
      "body": [
        "const fs = require('fs');",
        "const AWS = require('aws-sdk');",
        "const multer = require('multer');",
        "const multerS3 = require('multer-s3');",
        "// ===================",
        "// ==== S3 CONFIG ====",
        "// ===================",
        "const storage = multer.diskStorage({",
        "  filename: function (req, file, cb) {",
        "    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);",
        "    cb(null, \"-\" + uniqueSuffix + file.originalname);",
        "  },",
        "});",
        "",
        "const fileFilter = (req, file, cb) => {",
        "  console.log(file);",
        "  //reject a file",
        "  if (",
        "    // file.minetype == \"application/pdf\"",
        "    file.mimetype === \"image/jpg\" ||",
        "    file.mimetype === \"image/jpeg\" ||",
        "    file.mimetype === \"image/png\"",
        "  ) {",
        "    cb(null, true);",
        "  } else {",
        "    cb(null, true);",
        "  }",
        "};",
        "",
        "const upload = multer({ storage: storage }, { filter: fileFilter });",
        "const s3 = new AWS.S3({",
        "  accessKeyId: keys.awsAccessKeyID,",
        "  secretAccessKey: keys.awsSecretAccessKey,",
        "  region: keys.awsRegion,",
        "});",
        "",
        "// ============",
        ""
      ],
      "description": "AWS S3 config"
    },
    "Upload multiple files": {
      "prefix": "uploadMultiple",
      "body": [
        "  // =================================",
        "  // ==== ${1:apiName} ====",
        "  // =================================",
        "  router.post(",
        "    \"${2:apiRoutes}\",",
        "    requireLogin,",
        "    upload.array(\"files\", 30),",
        "    async (req, res) => {",
        "      console.log(",
        "        \"==== ${1:apiName} REQUEST ==== \\n Date: \",",
        "        new Date()",
        "      );",
        "      const id = req.user.id;",
        "      const {  } = req.body;",
        "      let images = [];",
        "      try {",
        "        const files = req.files;",
        "        console.log(files);",
        "        const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);",
        "        files.map(async (file, i) => {",
        "          try {",
        "            const params = {",
        "              Bucket: keys.s3PublicBucket,",
        "              Key: \"userUploads/\" + uniqueSuffix + file.originalname, //stored in the uploads directory",
        "              Body: fs.createReadStream(file.path), //read the file",
        "              ContentType: file.mimetype,",
        "              ACL: \"public-read\",",
        "            };",
        "            await s3.upload(params, async function (err, data) {",
        "              if (err) {",
        "                console.log(err);",
        "                res.status(500).json({ message: err });",
        "              } else {",
        "                images.push(",
        "                    \"https://\" +",
        "                    keys.s3PublicBucket +",
        "                    \".s3.ap-south-1.amazonaws.com/\" +",
        "                    \"userUploads/\" +",
        "                    uniqueSuffix +",
        "                    file.originalname,",
        "                );",
        "                if (images.length == files.length) {",
        "                  // ==== SAVE MODEL ====",
        "                  return res.json({ });",
        "                }",
        "              }",
        "            });",
        "          } catch (err) {",
        "            console.log(",
        "              \"=== ${1:apiName} ERROR ===\\n\",",
        "              err.message",
        "            );",
        "            res.status(500).json({ error: \"SERVER_ERROR\" });",
        "          }",
        "        });",
        "      } catch (err) {",
        "        console.log(\"=== ${1:apiName} ERROR ===\\n\", err.message);",
        "        res.status(500).json({ error: \"SERVER_ERROR\" });",
        "      }",
        "    }",
        "  );",
        ""
      ],
      "description": "Upload multiple files"
    },
    "Upload single file": {
      "prefix": "uploadSingle",
      "body": [
        "//======================",
        "//==== ${1:apiName} ====",
        "//======================",
        "router.post(",
        "   \"${2:apiRoutes}\",",
        "    requireLogin,",
        "    upload.single(\"files\"),",
        "    async (req, res) => {",
        "      console.log(",
        "        \"==== ${1:apiName} ====\\n Date: \",",
        "        new Date(),",
        "        req.body",
        "      );",
        "      console.log(\"USER: \", req.user.name);",
        "      const {} = req.body;",
        "      const file = req.file;",
        "      const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);",
        "      try {",
        "        if (file) {",
        "          const params = {",
        "            Bucket: keys.s3PublicBucket,",
        "            Key: \"products/\" + uniqueSuffix + \"image.png\", //stored in the uploads directory",
        "            Body: fs.createReadStream(file.path), //read the file",
        "            ContentType: file.mimetype,",
        "            ACL: \"public-read\",",
        "          };",
        "          await s3.upload(params, async function (err, data) {",
        "            if (err) {",
        "              console.log(err);",
        "              res.status(500).json({ message: err });",
        "            } else {",
        "              // ==== SAVE / UPDATE ====",
        "              return res.json();",
        "            }",
        "          });",
        "        } else {",
        "          console.log(\"product without image\");",
        "          // ==== SAVE / UPDATE ====",
        "          return res.json();",
        "        }",
        "      } catch (err) {",
        "        console.log(\"=== ${1:apiName} ERROR ===\\n\", err.message);",
        "        res.status(500).send(\"Server Error\");",
        "      }",
        "    }",
        "  );",
        ""
      ],
      "description": "Upload single file"
    },
    "For Loop": {
        "prefix": ["for", "for-const"],
        "body": ["for (const ${2:element} of ${1:array}) {", "\t$0", "}"],
        "description": "A for loop."
    }
}